{"data":{"site":{"siteMetadata":{"title":"Lecstor's Blog","author":"Jason Galea"}},"markdownRemark":{"id":"f5c257a4-46ec-5954-ae81-822b495e956d","excerpt":"To make you components as reusable as possibly you should keep them small and\nfocussed. Much like functions, the single responsibility…","html":"<p>To make you components as reusable as possibly you should keep them small and\nfocussed. Much like functions, the single responsibility principle is a good\none to follow. Allow styling and child components to be as customisable as\npossible and you’ll avoid the need to repeat styling and logic over and over\nin all the different components you need.</p>\n<h2>Containers</h2>\n<h3>Children props</h3>\n<p>If your component’s job is to simply provide a container for other components\nthen you can simply render the <code class=\"language-text\">childen</code> prop wrapped in your comtainer.</p>\n<p>This can be used to provide padding, borders, or similar, or to be a\nresponsive container for content.</p>\n<p>Containers allow the user full control over the components rendered inside the\ncontainer.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import styled from &quot;styled-components&quot;;\n\nconst Box = styled.div`padding: 20`;\n\nconst Container = ({ children }) =&gt; {\n  &lt;Box&gt;{children}&lt;/Box&gt;\n}</code></pre></div>\n<h3>Render-props and Higher-order Components</h3>\n<p>If the component’s job is to provide some form of reusable logic then it should\nlikely utilise the render-prop pattern or be a\n<a href=\"https://reactjs.org/docs/higher-order-components.html\">Higher-Order Component</a>.</p>\n<p>Higher-order components are functions that take a component and return a new\ncomponent with enhanced capabilities so they are applied to a single, complete\ncomponent.</p>\n<p>The render-props pattern allows a component to accept multiple components as\nprops to be rendered as nested children, optionally with customised props.</p>\n<p>For ultimate flexibility, depending on the use-case, a render-props component\ncan be wrapped in a HOD allowing the profided functionality to be used in either\nway.</p>\n<h2>Styling</h2>\n<p>If your component renders any components that aren’t passed in as children or\nrender props it should be possible to pass in styling to customise them. We can\neasily do this by accepting <code class=\"language-text\">className</code> and <code class=\"language-text\">style</code> props and setting them on\nthe component to be rendered.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Component = ({ children, className, style }) =&gt; {\n  &lt;div className={className} style={style}&gt;\n    {children}\n  &lt;/div&gt;\n}</code></pre></div>","frontmatter":{"title":"Reusable React Components","date":"December 09, 2018"}}},"pageContext":{"slug":"/reusable-react-components/","previous":{"fields":{"slug":"/building-a-pdf-writer/"},"frontmatter":{"title":"Building a PDF writer"}},"next":null}}