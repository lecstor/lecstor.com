{"data":{"site":{"siteMetadata":{"title":"Lecstor's Blog","author":"Jason Galea"}},"markdownRemark":{"id":"f5c257a4-46ec-5954-ae81-822b495e956d","excerpt":"To make you components as reusable as possible you should keep them small and\nfocussed. Much like functions, the single responsibility…","html":"<p>To make you components as reusable as possible you should keep them small and\nfocussed. Much like functions, the single responsibility principle is a good\none to follow.</p>\n<p>Enabling styling and child components to be as customisable as possible will\nhelp you to avoid the need to repeat styling and logic over and over in all the\ndifferent components you’ll need.</p>\n<p>Achieving these goals will help you maintain consistency in the visual style of\nyour components and help to keep the total size of your app down.</p>\n<h2>Containers</h2>\n<p>Container components are great because they are very easy to make completely\ncustomisable, though naming is hard and and deciding when to customise and when\nto create a new container (and name it) wil be an ongoing dilemma.</p>\n<p>By setting default styles on a container component, but also allowing\n<code class=\"language-text\">className</code> and <code class=\"language-text\">style</code> props to be specified, your container components will\nbe simple to use and tweak.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import styled from &quot;styled-components&quot;;\n\nconst Box = styled.div`\n  padding: 5px;\n  width: 100%;\n\n  @media (min-width: 700px) {\n    padding: 20px;\n    width: 50%;\n  }\n`;\n\nconst InputContainer = ({ children, className, style }) =&gt; {\n  &lt;Box className={className} style={style}&gt;{children}&lt;/Box&gt;\n}\n\nexport default InputContainer;</code></pre></div>\n<h3>Render-props and Higher-order Components</h3>\n<p>If the component’s job is to provide some form of reusable logic then it should\nlikely utilise the render-prop pattern or be a\n<a href=\"https://reactjs.org/docs/higher-order-components.html\">Higher-Order Component</a>.</p>\n<p>Higher-order components are functions that take a component and return a new\ncomponent with enhanced capabilities so they are applied to a single, complete\ncomponent.</p>\n<p>The render-props pattern allows a component to accept multiple components as\nprops to be rendered as nested children, optionally with customised props.</p>\n<p>For ultimate flexibility, depending on the use-case, a render-props component\ncan be wrapped in a HOD allowing the profided functionality to be used in either\nway.</p>\n<h2>Styling</h2>\n<p>If your component renders any components that aren’t passed in as children or\nrender props it should be possible to pass in styling to customise them. We can\neasily do this by accepting <code class=\"language-text\">className</code> and <code class=\"language-text\">style</code> props and setting them on\nthe component to be rendered.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const Component = ({ children, className, style }) =&gt; {\n  &lt;div className={className} style={style}&gt;\n    {children}\n  &lt;/div&gt;\n}</code></pre></div>","frontmatter":{"title":"Reusable React Components","date":"December 09, 2018"}}},"pageContext":{"slug":"/reusable-react-components/","previous":{"fields":{"slug":"/building-a-pdf-writer/"},"frontmatter":{"title":"Building a PDF writer"}},"next":null}}