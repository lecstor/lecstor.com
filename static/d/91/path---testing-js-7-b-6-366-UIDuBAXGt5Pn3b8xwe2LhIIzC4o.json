{"data":{"site":{"siteMetadata":{"title":"Lecstor's Blog","author":"Jason Galea"}},"markdownRemark":{"id":"716acc54-ea5d-57b5-84fd-e7ad6f70e9e1","excerpt":"Some thoughts on testing - the what and the how (javascript). Testing The primary reason for writing automated tests is to ensure that your…","html":"<p>Some thoughts on testing - the what and the how (javascript).</p>\n<h1 id=\"testing\"><a href=\"#testing\" aria-label=\"testing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testing</h1>\n<p>The primary reason for writing automated tests is to ensure that your code runs\ncorrectly. When you make changes to your code, tests should tell you when you\nbreak things. Tests can also be used as usage examples for others.</p>\n<p>Having 100% code coverage is nice, but is no guarentee that your code does what\nit’s meant to. Code coverage rarely equates to functional use coverage.</p>\n<h2 id=\"services\"><a href=\"#services\" aria-label=\"services permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Services</h2>\n<p>Ensure that your tests can get an instance of the server without actually\nstarting the server. Ensure that the instance has all routes, plugins, etc\ninitialised, or that tests can easily initialise the parts they need. The\nlatter is simpler and more reliable, and in most cases to be preferred.</p>\n<p>Keeping I/O as close to the routes/handlers as possible allows for the business\nlogic to be contained in functional functions/methods/classes which are more\neasily testable.</p>\n<h3 id=\"recommendations-for-writing-services\"><a href=\"#recommendations-for-writing-services\" aria-label=\"recommendations for writing services permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendations for writing services:</h3>\n<ul>\n<li>use Node >= 8 for async/await goodness</li>\n<li>don’t use Babel, it’ll only complicate things</li>\n<li>user <code class=\"language-text\">require</code> and <code class=\"language-text\">module.exports</code></li>\n<li><code class=\"language-text\">exports</code> is a reference to <code class=\"language-text\">module.exports</code>, if you set it to another value\nwhat you set it to won’t be exported</li>\n</ul>\n<h2 id=\"functional-testing\"><a href=\"#functional-testing\" aria-label=\"functional testing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functional Testing</h2>\n<p>Test actual use-cases. This means writing tests for your endpoints in a service\nor public methods in a module. You shouldn’t be looking at code coverage for\nthese tests, just coverage of the functionality the service or module should\nprovide. Name your tests for the use case they exercise. Test the happy paths\nand error paths including validation and I/O errors.</p>\n<p>Mocking for these tests should not be done on the functions internal to the\nmodule or service you are testing. Mock I/O only, such as requests to other\nservices, and database or disk I/O. Avoid nocking where possible, and rather\nmock the clients your code uses to perform I/O operations. Nocking generally\ninvolves too much knowledge of how the other things work internally while\nclients are generally much simpler and their existing methods and API are\nless likely to change.</p>\n<h2 id=\"unit-tests\"><a href=\"#unit-tests\" aria-label=\"unit tests permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unit Tests</h2>\n<p>Once you have good functional coverage you can look at your code coverage to\nsee where the holes in your testing are. Keep in mind, if you have good\nfunctional coverage and blocks of code such as whole functions or modules\nstill don’t have coverage, you may not actually need that code at all, or\nmaybe you need some more functional tests.</p>\n<p>For complex functions, possibly with arguments that can vary substantially\nyou can write unit tests. Ideally complex logic will be broken out into\nfunctions that have no I/O and simply take arguments and return a result.\nThis makes writing numerous test much simpler. If a function does I/O,\nincluding calling other functions, try to ensure it is tested by your\nfunctional tests so you’re not having to implement loads of mocking.</p>\n<h2 id=\"javascript\"><a href=\"#javascript\" aria-label=\"javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript</h2>\n<p>Use <a href=\"https://facebook.github.io/jest/docs/en/api.html\">Jest</a>. If you really have to, then Mocha and Sinon seem to be the way to go.\nBut Jest will make writing and running your tests simpler and more enjoyable. 8)</p>\n<h3 id=\"mocking\"><a href=\"#mocking\" aria-label=\"mocking permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocking</h3>\n<p>Jest allows your tests to mock modules and functions used by your code even when\nthat code does not allow you to inject your mocks. Functions mocked with Jest all\nget a <code class=\"language-text\">mock</code> property which records all calls made to them so you can test that\nyour code is calling them correctly.</p>\n<p><a href=\"https://facebook.github.io/jest/docs/en/mock-functions.html#mock-property\">.mock property</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mockGetOrg <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"role_e8355627893b4a9c8a5a955d1d56cad5\"</span><span class=\"token punctuation\">,</span>\n    members<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">\"user_ab6a42ea4b2c404989fb6638e2675599\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"user_ab6a42ea4b2c404989fb6638e2675000\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@safetyculture/soter-client\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> getOrg<span class=\"token punctuation\">:</span> mockGetOrg <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it calls soter-client getOrg correctly\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">:</span> <span class=\"token string\">\"user_1234\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> firstCall <span class=\"token operator\">=</span> mockGetOrg<span class=\"token punctuation\">.</span>mock<span class=\"token punctuation\">.</span>calls<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstArg<span class=\"token punctuation\">,</span> secondArg<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> firstCall<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>firstArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>secondArg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInstanceOf</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://facebook.github.io/jest/docs/en/mock-functions.html\">Mock Functions</a></p>\n<h3 id=\"nocking\"><a href=\"#nocking\" aria-label=\"nocking permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nocking</h3>\n<ul>\n<li>set test log level to error, it’s a bit noisy, but without it route tests give you no clue as to what’s gone wrong</li>\n<li>capture nock scope and call done when it’s expected to be done for more useful test failures</li>\n<li>modify afterEach nock expect to give more info otherwise and clear pending nocks so all following tests don’t break</li>\n</ul>\n<p>afterEach test:</p>\n<ul>\n<li>expect there to be no pending mocks. The exception from this will tell you\nexactly which of the requests you were nocking did not fire.</li>\n<li>isDone will ensure that nock believes it is done</li>\n<li>cleanAll will make sure there are no remaining nocks for the next test</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">afterEach</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>nock<span class=\"token punctuation\">.</span><span class=\"token function\">pendingMocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>empty\n  nock<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  nock<span class=\"token punctuation\">.</span><span class=\"token function\">cleanAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In tests, call <code class=\"language-text\">isDone</code> on each nock scope before checking the result. If you\ncheck the result first, and the nock scope after, then a failing test will\nprevent the scope check from running and you don’t get told that the request\ndidn’t fire.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something that makes a request\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myNock <span class=\"token operator\">=</span> <span class=\"token function\">nock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:1234\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">reply</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getHome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myNock<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"running-tests-with-jest\"><a href=\"#running-tests-with-jest\" aria-label=\"running tests with jest permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running tests with Jest</h3>\n<p>In your package.json set the test script to <code class=\"language-text\">jest</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">test</span></code></pre></div>\n<p>Jest enables you to run individual scripts by file or test name matches.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn <span class=\"token function\">test</span> __tests__/my-test.js\n<span class=\"token function\">npm</span> <span class=\"token function\">test</span> __tests__/my-test.js\n\nyarn <span class=\"token function\">test</span> --testRegex __tests__\\/my-.*\\.js\n<span class=\"token function\">npm</span> <span class=\"token function\">test</span> -- --testRegex __tests__\\/my-.*\\.js\n\nyarn <span class=\"token function\">test</span> -t <span class=\"token string\">\"tests the .*\"</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">test</span> -- -t <span class=\"token string\">\"tests the .*\"</span></code></pre></div>\n<p>Jest has in-built coverage functionality</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn <span class=\"token function\">test</span> --coverage</code></pre></div>\n<p>Jest will also watch while you modify your code</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn <span class=\"token function\">test</span> --coverage --watch\nyarn <span class=\"token function\">test</span> -t <span class=\"token string\">\"tests the .*\"</span> --watch</code></pre></div>","frontmatter":{"title":"Testing Code","date":"March 10, 2018"}}},"pageContext":{"slug":"/testing-js/","previous":{"fields":{"slug":"/notes-optimizing-for-iteration-speed/"},"frontmatter":{"title":"Optimizing for iteration speed"}},"next":{"fields":{"slug":"/reusable-react-components/"},"frontmatter":{"title":"Reusable React Components [WIP]"}}}}