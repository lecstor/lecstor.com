{"data":{"site":{"siteMetadata":{"title":"Personal Musings by Lecstor","author":"Jason Galea"}},"markdownRemark":{"id":"c2abf9cb-5601-5521-b89f-4033cdd76ee4","excerpt":"A PDF file is basically a set of object serialised in a specific format similar to PostScript. Our initial goal is to be able to place text…","html":"<p>A PDF file is basically a set of object serialised in a specific format similar to PostScript. Our initial goal is to be able to place text in a PDF by writing the required objects in the correct format but today we’ll just start with the overall layout of the PDF file source.</p>\n<p>The first thing we write to the file is the PDF header which consists of the PDF version and 4 binary characters to ensure readers know the file contains binary.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%PDF-1.4\n%ÿÿÿÿ</code></pre></div>\n<p>After that we add the objects which will lay out the document. Each object begins with an id followed by a dictionary and an optional stream. We won’t be working with streams this round.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 0 obj\n&lt;&lt;\n  /Type /Catalog\n  /Pages 2 0 R\n&gt;&gt;\nendobj</code></pre></div>\n<p>Following the objects we put down the <code class=\"language-text\">xref</code>. The <code class=\"language-text\">xref</code> is an index of the objects in the file to help readers locate them quickly (and add a bit more info in PDF files that have been modified).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">xref\n0 3\n0000000000 65535 f\n0000000222 00000 n\n0000000031 00000 n</code></pre></div>\n<p>Each object in the file needs to have a record in the <code class=\"language-text\">xref</code> which points to the object’s location in bytes from the start of the file so as we write out objects we need to keep track of where they are being written. To do this we will keep a tally of the lengths of data we write and record it’s value before writing each object.</p>\n<p>To finish off we need to add a Trailer and a pointer to the start of the <code class=\"language-text\">xref</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">trailer\n&lt;&lt; /Size 7 /Root 6 0 R\n/ID [&lt;abc123&gt;&lt;abc123&gt;]\n&gt;&gt;\nstartxref\n521\n%%EOF</code></pre></div>\n<p>The example code below is Javascript (ES6) but would be easily translated to others.</p>\n<p>Let’s create the file and write the header..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let fileOffset = 0;\nconst pdf = fs.createWriteStream(`hello-world.pdf`);\n\nconst head = new Buffer(`%PDF-1.4\\n%\\xFF\\xFF\\xFF\\xFF\\n`, &#39;binary&#39;);\n\n// update fileOffset to point to the next object&#39;s position\nfileOffset += head.length;\npdf.write(head);</code></pre></div>\n<p>And our first (and only) object; we’ll add the catalog..</p>\n<p><em>(the funky formatting is to ensure the correct newlines without a bunch of \\n)</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let cat = `1 0 obj\n&lt;&lt; /Type /Catalog /Pages 2 0 R &gt;&gt;\nendobj\n`;\n\n// record the position the catalog will be written at\nlet offsets = { 1: fileOffset };\n\ncat = new Buffer(cat, &#39;binary&#39;);\nfileOffset += cat.length;\npdf.write(cat);</code></pre></div>\n<p>Once we’ve added our objects to the file we can add our <code class=\"language-text\">xref</code> (we don’t have nearly enough for a valid PDF yet, we’ll add those next time).</p>\n<p>For a new PDF each object in our file needs a line in the <code class=\"language-text\">xref</code> consisting of it’s location in bytes from the start of the file followed by <code class=\"language-text\">&quot; 0000 n”</code> which relates to the version of the object and it’s active state and only needs to change if an existing PDF is being modified.</p>\n<p>The lines in the <code class=\"language-text\">xref</code> must be sorted by object id and the ids must be sequential.</p>\n<p>We also need to record the file offset of the <code class=\"language-text\">xref</code> for the PDF footer.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const xrefOffset = fileOffset;\nconst fontOffset = `0000000000${offsets[&#39;1&#39;]}`.slice(-10);\nconst count = Object.keys(offsets).length;\n\nconst xref = `xref\n0 ${count}\n0000000000 65535 f\n${fontOffset} 00000 n\n`;\n\npdf.write(xref);</code></pre></div>\n<p>After the <code class=\"language-text\">xref</code> comes the <code class=\"language-text\">trailer</code> containing a dictionary telling the reader how many <code class=\"language-text\">xref</code> entries there are, the root object’s id, and the document’s id amongst other things.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pdf.write(`trailer\n&lt;&lt;\n  /Size 7\n  /Root 1 0 R\n  /ID [&lt;abc123&gt;, &lt;abc123&gt;]\n&gt;&gt;\n`);</code></pre></div>\n<p>Then we finish it off with a pointer to the start of the xref where the reader knows where to find it near the end of the file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pdf.write(`startxref\n${xrefOffset}\n%%EOF\n`);</code></pre></div>\n<p>The file that is created is valid PDF markup, but is incomplete so won’t open in a PDF viewer. We’ll need to add some more objects such as Pages, Page, Font, ProcSet, Resource, and Content, but that’s probably enough for today.</p>","frontmatter":{"title":"Building a PDF writer","date":"February 10, 2017"}}},"pageContext":{"slug":"/building-a-pdf-writer/","previous":{"fields":{"slug":"/mongodb-upgrade-24-to-26-in-debian/"},"frontmatter":{"title":"MongoDB Upgrade 2.4 to 2.6 in Debian"}},"next":null}}